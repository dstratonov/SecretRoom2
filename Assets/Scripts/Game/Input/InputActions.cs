//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Content/Configs/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Battle"",
            ""id"": ""03b066f8-a97f-4229-a8dc-c6c4dbf09112"",
            ""actions"": [
                {
                    ""name"": ""SelectPrevious"",
                    ""type"": ""Button"",
                    ""id"": ""842bd22f-11ba-41b2-ae07-94059a78b287"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNext"",
                    ""type"": ""Button"",
                    ""id"": ""4a26886f-9a23-4ce5-8548-7dcd7aadeb6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PerformAbility"",
                    ""type"": ""Button"",
                    ""id"": ""812e537d-5b72-4ebe-afc3-cfca4cb46862"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d1dc4961-1953-4efe-be25-b9fdd9526b4d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPrevious"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bba72a7d-cf9f-4a94-8b68-f7d31c8ed5bb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c812d983-8089-47d1-b794-f27abe40cd2d"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PerformAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerInputs"",
            ""bindingGroup"": ""PlayerInputs"",
            ""devices"": []
        }
    ]
}");
        // Battle
        m_Battle = asset.FindActionMap("Battle", throwIfNotFound: true);
        m_Battle_SelectPrevious = m_Battle.FindAction("SelectPrevious", throwIfNotFound: true);
        m_Battle_SelectNext = m_Battle.FindAction("SelectNext", throwIfNotFound: true);
        m_Battle_PerformAbility = m_Battle.FindAction("PerformAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Battle
    private readonly InputActionMap m_Battle;
    private List<IBattleActions> m_BattleActionsCallbackInterfaces = new List<IBattleActions>();
    private readonly InputAction m_Battle_SelectPrevious;
    private readonly InputAction m_Battle_SelectNext;
    private readonly InputAction m_Battle_PerformAbility;
    public struct BattleActions
    {
        private @InputActions m_Wrapper;
        public BattleActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectPrevious => m_Wrapper.m_Battle_SelectPrevious;
        public InputAction @SelectNext => m_Wrapper.m_Battle_SelectNext;
        public InputAction @PerformAbility => m_Wrapper.m_Battle_PerformAbility;
        public InputActionMap Get() { return m_Wrapper.m_Battle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleActions set) { return set.Get(); }
        public void AddCallbacks(IBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleActionsCallbackInterfaces.Add(instance);
            @SelectPrevious.started += instance.OnSelectPrevious;
            @SelectPrevious.performed += instance.OnSelectPrevious;
            @SelectPrevious.canceled += instance.OnSelectPrevious;
            @SelectNext.started += instance.OnSelectNext;
            @SelectNext.performed += instance.OnSelectNext;
            @SelectNext.canceled += instance.OnSelectNext;
            @PerformAbility.started += instance.OnPerformAbility;
            @PerformAbility.performed += instance.OnPerformAbility;
            @PerformAbility.canceled += instance.OnPerformAbility;
        }

        private void UnregisterCallbacks(IBattleActions instance)
        {
            @SelectPrevious.started -= instance.OnSelectPrevious;
            @SelectPrevious.performed -= instance.OnSelectPrevious;
            @SelectPrevious.canceled -= instance.OnSelectPrevious;
            @SelectNext.started -= instance.OnSelectNext;
            @SelectNext.performed -= instance.OnSelectNext;
            @SelectNext.canceled -= instance.OnSelectNext;
            @PerformAbility.started -= instance.OnPerformAbility;
            @PerformAbility.performed -= instance.OnPerformAbility;
            @PerformAbility.canceled -= instance.OnPerformAbility;
        }

        public void RemoveCallbacks(IBattleActions instance)
        {
            if (m_Wrapper.m_BattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleActions @Battle => new BattleActions(this);
    private int m_PlayerInputsSchemeIndex = -1;
    public InputControlScheme PlayerInputsScheme
    {
        get
        {
            if (m_PlayerInputsSchemeIndex == -1) m_PlayerInputsSchemeIndex = asset.FindControlSchemeIndex("PlayerInputs");
            return asset.controlSchemes[m_PlayerInputsSchemeIndex];
        }
    }
    public interface IBattleActions
    {
        void OnSelectPrevious(InputAction.CallbackContext context);
        void OnSelectNext(InputAction.CallbackContext context);
        void OnPerformAbility(InputAction.CallbackContext context);
    }
}
